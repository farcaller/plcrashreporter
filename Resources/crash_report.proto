/*
 * Author: Landon Fuller <landonf@plausiblelabs.com>
 *
 * Copyright (c) 2008 Plausible Labs Cooperative, Inc.
 * All rights reserved.
 */

package plcrash;
option java_package = "com.plausiblelabs.crashreporter";

/* Known processor architecture types */
enum MachineType {
    /* x86 */
    X86_32 = 0;

    /* x86-64 */
    X86_64 = 1;

    /* ARM */
    ARM = 2;
}

/* Known operating system types */
enum OperatingSystem {
    /* Mac OS X */
    MAC_OS_X = 0;

    /* iPhone OS */
    IPHONE_OS = 1;

    /* iPhone Simulator (Mac OS X w/ simulator runtime environment) */
    IPHONE_SIMULATOR = 2;
}

/* A crash report */
message CrashReport {
    message SystemInfo {
        /* Operating system */
        required OperatingSystem operating_system = 1;

        /* OS version */
        required string os_version = 2;

        /* Processor architecture */
        required MachineType machine_type = 3;

        /* Date crash report was generated (as seconds since epoch). 0 if the time
         * is unknown or can not be determined. */
        required uint32 timestamp = 4;
    }

    /* Host data */
    required SystemInfo system_info = 1;
    
    /* x86-32 Register State */
    message Registers_x86_32 {
        /** Return value */
        required uint32 eax = 1;

        /** Dividend register */
        required uint32 edx = 2;

        /** Count register */
        required uint32 ecx = 3;

        /** Local register variable */
        required uint32 ebx = 4;
        
        /** Stack frame pointer */
        required uint32 ebp = 5;

        /** Local register variable */
        required uint32 esi = 6;

        /** Local register variable */
        required uint32 edi = 7;

        /** Stack pointer */
        required uint32 esp = 8;

        /** Instruction pointer */
        required uint32 eip = 9;
        
        /** Flags */
        required uint32 eflags = 10;
        
        /* Scratcn */
        required uint32 trapno = 11;
        
        
        /*
         * Segment Registers
         */
         
        /** Segment register */
        required uint32 cs = 12;
        
        /** Segment register */
        required uint32 ds = 13;
        
        /** Segment register */
        required uint32 es = 14;
        
        /** Segment register */
        required uint32 fs = 15;
        
        /** Segment register */
        required uint32 gs = 16;
    }

    /* ARM Register State */
    message Registers_ARM {
        /*
         * General
         */
        required uint32 r0 = 1;
        required uint32 r1 = 2;
        required uint32 r2 = 3;
        required uint32 r3 = 4;
        required uint32 r4 = 5;
        required uint32 r5 = 6;
        required uint32 r6 = 7;
        required uint32 r7 = 8;
        required uint32 r8 = 9;
        required uint32 r9 = 10;
        required uint32 r10 = 11;
        required uint32 r11 = 12;
        required uint32 r12 = 13;

        /* stack pointer (r13) */
        required uint32 sp = 14;

        /* link register (r14) */
        required uint32 lr = 15;

        /** Program counter (r15) */
        required uint32 pc = 16;
    }

    /* Thread state */
    message Thread {
        /* Thread number (indexed at 0, must be unique within a crash report) */
        required uint32 thread_number = 1;
        
        /* Stack frame */
        message StackFrame {
            /* Instruction pointer */
            required uint64 pc = 3;
        }

        /* Backtrace stack frames */
        repeated StackFrame frames = 2;

        /* True if this is the crashed thread */
        required bool crashed = 3;

        /* Platform specific thread registers (required if this is the
         * crashed thread, optional otherwise). Must match the
         * CrashReport MachineType. */
        
        optional Registers_ARM registers_arm = 4;
        
        optional Registers_x86_32 registers_x86_32 = 5;
    }

    /* All backtraces */
    repeated Thread threads = 2;

    /* Binary image */
    message BinaryImage {
        /* Virtual memory slide */
        required uint64 base_address = 1;

        /* Size of mapped memory */
        required uint64 size = 2;

        /* Name of the binary image (should be a full path name) */
        required string name = 3;

        /* 128-bit object UUID (matches Mach-O DWARF dSYM files) */
        optional bytes uuid = 4;
    }

    /* All loaded binary images */
    repeated BinaryImage binary_images = 4;
}
